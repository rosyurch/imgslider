const imagesArr=Array.from(document.querySelectorAll(".slider .container .pics > img")),prevBtn=document.querySelector(".slider .container .btn-prev"),nextBtn=document.querySelector(".slider .container .btn-next"),dot0=document.querySelector("#dot-0"),dot1=document.querySelector("#dot-1"),dot2=document.querySelector("#dot-2"),dots=Array.from(document.querySelectorAll(".dot-cont .dot")),setting=document.querySelector(".slider .toggle p");let classesToAdd=["current"];function settingToggle(e){"Fade in"===e.target.innerText?(e.target.innerText="Slide in",classesToAdd.push("move","slide-in")):(e.target.innerText="Fade in",classesToAdd.pop(),classesToAdd.pop(),imagesArr.forEach(e=>e.classList.remove("move","slide-in","slide-out")))}function dotHandler(e){dots.filter(e=>e.classList.contains("current-dot"))[0].classList.remove("current-dot"),e.target.classList.add("current-dot"),getCurrentIndexRemoveClass(imagesArr),imagesArr[parseInt(e.target.id[4],10)].classList.add(...classesToAdd)}function getCurrentIndexRemoveClass(e){const t=e.filter(e=>e.classList.contains("current"));return index=e.indexOf(t[0]),t[0].classList.remove(...classesToAdd),index}nextBtn.addEventListener("click",e=>{let t=getCurrentIndexRemoveClass(imagesArr);console.log(imagesArr[t]),newCurIndex=(t+1)%imagesArr.length,"Slide in"===setting.innerText&&imagesArr[t].classList.add("slide-out"),imagesArr[newCurIndex].classList.contains("slide-out")&&imagesArr[newCurIndex].classList.remove("slide-out"),imagesArr[newCurIndex].classList.add(...classesToAdd),dots.filter(e=>e.classList.contains("current-dot"))[0].classList.remove("current-dot"),dots[newCurIndex].classList.add("current-dot")}),prevBtn.addEventListener("click",e=>{let t=getCurrentIndexRemoveClass(imagesArr);console.log(imagesArr[t]),newCurIndex=t?t-1:imagesArr.length-1,imagesArr[newCurIndex].classList.add(...classesToAdd),dots.filter(e=>e.classList.contains("current-dot"))[0].classList.remove("current-dot"),dots[newCurIndex].classList.add("current-dot")}),dot0.addEventListener("click",dotHandler),dot1.addEventListener("click",dotHandler),dot2.addEventListener("click",dotHandler),setting.addEventListener("click",settingToggle);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzL3NjcmlwdC5qcyJdLCJuYW1lcyI6WyJpbWFnZXNBcnIiLCJBcnJheSIsImZyb20iLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJwcmV2QnRuIiwicXVlcnlTZWxlY3RvciIsIm5leHRCdG4iLCJkb3QwIiwiZG90MSIsImRvdDIiLCJkb3RzIiwic2V0dGluZyIsImNsYXNzZXNUb0FkZCIsInNldHRpbmdUb2dnbGUiLCJldmVudCIsInRhcmdldCIsImlubmVyVGV4dCIsInB1c2giLCJwb3AiLCJmb3JFYWNoIiwiaW1nIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwiZG90SGFuZGxlciIsImZpbHRlciIsImRvdCIsImNvbnRhaW5zIiwiYWRkIiwiZ2V0Q3VycmVudEluZGV4UmVtb3ZlQ2xhc3MiLCJwYXJzZUludCIsImlkIiwiYXJyIiwiY3VyciIsImltYWdlIiwiaW5kZXgiLCJpbmRleE9mIiwiYWRkRXZlbnRMaXN0ZW5lciIsImN1ckluZGV4IiwiY29uc29sZSIsImxvZyIsIm5ld0N1ckluZGV4IiwibGVuZ3RoIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFBQSxVQUFBQyxNQUFBQyxLQUFBQyxTQUFBQyxpQkFBQSxtQ0FDQUMsUUFBQUYsU0FBQUcsY0FBQSxnQ0FDQUMsUUFBQUosU0FBQUcsY0FBQSxnQ0FDQUUsS0FBQUwsU0FBQUcsY0FBQSxVQUNBRyxLQUFBTixTQUFBRyxjQUFBLFVBQ0FJLEtBQUFQLFNBQUFHLGNBQUEsVUFDQUssS0FBQVYsTUFBQUMsS0FBQUMsU0FBQUMsaUJBQUEsbUJBQ0FRLFFBQUFULFNBQUFHLGNBQUEscUJBRUEsSUFBQU8sYUFBQSxDQUFBLFdBaUNBLFNBQUFDLGNBQUFDLEdBQ0EsWUFBQUEsRUFBQUMsT0FBQUMsV0FDQUYsRUFBQUMsT0FBQUMsVUFBQSxXQUNBSixhQUFBSyxLQUFBLE9BQUEsY0FFQUgsRUFBQUMsT0FBQUMsVUFBQSxVQUNBSixhQUFBTSxNQUNBTixhQUFBTSxNQUNBbkIsVUFBQW9CLFFBQUFDLEdBQUFBLEVBQUFDLFVBQUFDLE9BQUEsT0FBQSxXQUFBLGVBSUEsU0FBQUMsV0FBQVQsR0FDQUosS0FBQWMsT0FBQUMsR0FBQUEsRUFBQUosVUFBQUssU0FBQSxnQkFDQSxHQUFBTCxVQUFBQyxPQUFBLGVBQ0FSLEVBQUFDLE9BQUFNLFVBQUFNLElBQUEsZUFDQUMsMkJBQUE3QixXQUNBQSxVQUFBOEIsU0FBQWYsRUFBQUMsT0FBQWUsR0FBQSxHQUFBLEtBQUFULFVBQUFNLE9BQUFmLGNBV0EsU0FBQWdCLDJCQUFBRyxHQUNBLE1BQUFDLEVBQUFELEVBQUFQLE9BQUFTLEdBQUFBLEVBQUFaLFVBQUFLLFNBQUEsWUFJQSxPQUhBUSxNQUFBSCxFQUFBSSxRQUFBSCxFQUFBLElBQ0FBLEVBQUEsR0FBQVgsVUFBQUMsVUFBQVYsY0FFQXNCLE1BaEVBNUIsUUFBQThCLGlCQUFBLFFBQUF0QixJQUNBLElBQUF1QixFQUFBVCwyQkFBQTdCLFdBQ0F1QyxRQUFBQyxJQUFBeEMsVUFBQXNDLElBQ0FHLGFBQUFILEVBQUEsR0FBQXRDLFVBQUEwQyxPQUNBLGFBQUE5QixRQUFBSyxXQUFBakIsVUFBQXNDLEdBQUFoQixVQUFBTSxJQUFBLGFBQ0E1QixVQUFBeUMsYUFBQW5CLFVBQUFLLFNBQUEsY0FBQTNCLFVBQUF5QyxhQUFBbkIsVUFBQUMsT0FBQSxhQUVBdkIsVUFBQXlDLGFBQUFuQixVQUFBTSxPQUFBZixjQUVBRixLQUFBYyxPQUFBQyxHQUFBQSxFQUFBSixVQUFBSyxTQUFBLGdCQUNBLEdBQUFMLFVBQUFDLE9BQUEsZUFDQVosS0FBQThCLGFBQUFuQixVQUFBTSxJQUFBLGlCQUdBdkIsUUFBQWdDLGlCQUFBLFFBQUF0QixJQUNBLElBQUF1QixFQUFBVCwyQkFBQTdCLFdBQ0F1QyxRQUFBQyxJQUFBeEMsVUFBQXNDLElBQ0FHLFlBQUFILEVBQUFBLEVBQUEsRUFBQXRDLFVBQUEwQyxPQUFBLEVBQ0ExQyxVQUFBeUMsYUFBQW5CLFVBQUFNLE9BQUFmLGNBRUFGLEtBQUFjLE9BQUFDLEdBQUFBLEVBQUFKLFVBQUFLLFNBQUEsZ0JBQ0EsR0FBQUwsVUFBQUMsT0FBQSxlQUNBWixLQUFBOEIsYUFBQW5CLFVBQUFNLElBQUEsaUJBR0FwQixLQUFBNkIsaUJBQUEsUUFBQWIsWUFDQWYsS0FBQTRCLGlCQUFBLFFBQUFiLFlBQ0FkLEtBQUEyQixpQkFBQSxRQUFBYixZQUVBWixRQUFBeUIsaUJBQUEsUUFBQXZCIiwiZmlsZSI6InNjcmlwdHMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgaW1hZ2VzQXJyID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2xpZGVyIC5jb250YWluZXIgLnBpY3MgPiBpbWcnKSk7XG5jb25zdCBwcmV2QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNsaWRlciAuY29udGFpbmVyIC5idG4tcHJldicpO1xuY29uc3QgbmV4dEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZXIgLmNvbnRhaW5lciAuYnRuLW5leHQnKTtcbmNvbnN0IGRvdDAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZG90LTAnKTtcbmNvbnN0IGRvdDEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZG90LTEnKTtcbmNvbnN0IGRvdDIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZG90LTInKTtcbmNvbnN0IGRvdHMgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5kb3QtY29udCAuZG90JykpO1xuY29uc3Qgc2V0dGluZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZXIgLnRvZ2dsZSBwJyk7XG5cbmxldCBjbGFzc2VzVG9BZGQgPSBbJ2N1cnJlbnQnXTtcblxubmV4dEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcbiAgICBsZXQgY3VySW5kZXggPSBnZXRDdXJyZW50SW5kZXhSZW1vdmVDbGFzcyhpbWFnZXNBcnIpO1xuICAgIGNvbnNvbGUubG9nKGltYWdlc0FycltjdXJJbmRleF0pO1xuICAgIG5ld0N1ckluZGV4ID0gKGN1ckluZGV4ICsgMSkgJSBpbWFnZXNBcnIubGVuZ3RoO1xuICAgIGlmIChzZXR0aW5nLmlubmVyVGV4dCA9PT0gJ1NsaWRlIGluJykgaW1hZ2VzQXJyW2N1ckluZGV4XS5jbGFzc0xpc3QuYWRkKCdzbGlkZS1vdXQnKTtcbiAgICBpZiAoaW1hZ2VzQXJyW25ld0N1ckluZGV4XS5jbGFzc0xpc3QuY29udGFpbnMoJ3NsaWRlLW91dCcpKSBpbWFnZXNBcnJbbmV3Q3VySW5kZXhdLmNsYXNzTGlzdC5yZW1vdmUoJ3NsaWRlLW91dCcpO1xuXG4gICAgaW1hZ2VzQXJyW25ld0N1ckluZGV4XS5jbGFzc0xpc3QuYWRkKC4uLmNsYXNzZXNUb0FkZCk7XG5cbiAgICBjb25zdCBjdXJyID0gZG90cy5maWx0ZXIoZG90ID0+IGRvdC5jbGFzc0xpc3QuY29udGFpbnMoJ2N1cnJlbnQtZG90JykpO1xuICAgIGN1cnJbMF0uY2xhc3NMaXN0LnJlbW92ZSgnY3VycmVudC1kb3QnKTtcbiAgICBkb3RzW25ld0N1ckluZGV4XS5jbGFzc0xpc3QuYWRkKCdjdXJyZW50LWRvdCcpO1xufSk7XG5cbnByZXZCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XG4gICAgbGV0IGN1ckluZGV4ID0gZ2V0Q3VycmVudEluZGV4UmVtb3ZlQ2xhc3MoaW1hZ2VzQXJyKTtcbiAgICBjb25zb2xlLmxvZyhpbWFnZXNBcnJbY3VySW5kZXhdKTtcbiAgICBuZXdDdXJJbmRleCA9IGN1ckluZGV4ID8gY3VySW5kZXggLSAxIDogaW1hZ2VzQXJyLmxlbmd0aCAtIDE7XG4gICAgaW1hZ2VzQXJyW25ld0N1ckluZGV4XS5jbGFzc0xpc3QuYWRkKC4uLmNsYXNzZXNUb0FkZCk7XG5cbiAgICBjb25zdCBjdXJyID0gZG90cy5maWx0ZXIoZG90ID0+IGRvdC5jbGFzc0xpc3QuY29udGFpbnMoJ2N1cnJlbnQtZG90JykpO1xuICAgIGN1cnJbMF0uY2xhc3NMaXN0LnJlbW92ZSgnY3VycmVudC1kb3QnKTtcbiAgICBkb3RzW25ld0N1ckluZGV4XS5jbGFzc0xpc3QuYWRkKCdjdXJyZW50LWRvdCcpO1xufSk7XG5cbmRvdDAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBkb3RIYW5kbGVyKTtcbmRvdDEuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBkb3RIYW5kbGVyKTtcbmRvdDIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBkb3RIYW5kbGVyKTtcblxuc2V0dGluZy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHNldHRpbmdUb2dnbGUpO1xuXG5mdW5jdGlvbiBzZXR0aW5nVG9nZ2xlKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LnRhcmdldC5pbm5lclRleHQgPT09ICdGYWRlIGluJykge1xuICAgICAgICBldmVudC50YXJnZXQuaW5uZXJUZXh0ID0gJ1NsaWRlIGluJztcbiAgICAgICAgY2xhc3Nlc1RvQWRkLnB1c2goJ21vdmUnLCAnc2xpZGUtaW4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBldmVudC50YXJnZXQuaW5uZXJUZXh0ID0gJ0ZhZGUgaW4nO1xuICAgICAgICBjbGFzc2VzVG9BZGQucG9wKCk7XG4gICAgICAgIGNsYXNzZXNUb0FkZC5wb3AoKTtcbiAgICAgICAgaW1hZ2VzQXJyLmZvckVhY2goaW1nID0+IGltZy5jbGFzc0xpc3QucmVtb3ZlKCdtb3ZlJywgJ3NsaWRlLWluJywgJ3NsaWRlLW91dCcpKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRvdEhhbmRsZXIoZXZlbnQpIHtcbiAgICBjb25zdCBjdXJyID0gZG90cy5maWx0ZXIoZG90ID0+IGRvdC5jbGFzc0xpc3QuY29udGFpbnMoJ2N1cnJlbnQtZG90JykpO1xuICAgIGN1cnJbMF0uY2xhc3NMaXN0LnJlbW92ZSgnY3VycmVudC1kb3QnKTtcbiAgICBldmVudC50YXJnZXQuY2xhc3NMaXN0LmFkZCgnY3VycmVudC1kb3QnKTtcbiAgICBnZXRDdXJyZW50SW5kZXhSZW1vdmVDbGFzcyhpbWFnZXNBcnIpO1xuICAgIGltYWdlc0FycltwYXJzZUludChldmVudC50YXJnZXQuaWRbNF0sIDEwKV0uY2xhc3NMaXN0LmFkZCguLi5jbGFzc2VzVG9BZGQpO1xufVxuXG4vLyBmdW5jdGlvbiBoaWRlKGFyciwgaW5kZXgpIHtcbi8vICAgICBhcnJbaW5kZXhdLmNsYXNzTGlzdC5hZGQoJ2hpZGUnKTtcbi8vIH1cblxuLy8gZnVuY3Rpb24gdW5oaWRlKGFyciwgaW5kZXgpIHtcbi8vICAgICBhcnJbaW5kZXhdLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGUnKTtcbi8vIH1cblxuZnVuY3Rpb24gZ2V0Q3VycmVudEluZGV4UmVtb3ZlQ2xhc3MoYXJyKSB7XG4gICAgY29uc3QgY3VyciA9IGFyci5maWx0ZXIoaW1hZ2UgPT4gaW1hZ2UuY2xhc3NMaXN0LmNvbnRhaW5zKCdjdXJyZW50JykpO1xuICAgIGluZGV4ID0gYXJyLmluZGV4T2YoY3VyclswXSk7IC8vIGZpbHRlciByZXR1cm5zIDEtZWxlbWVudCBhcnJheVxuICAgIGN1cnJbMF0uY2xhc3NMaXN0LnJlbW92ZSguLi5jbGFzc2VzVG9BZGQpO1xuICAgIC8vIGlmIChzZXR0aW5nLmlubmVyVGV4dCA9PT0gJ1NsaWRlIGluJykgY3VyclswXS5jbGFzc0xpc3QuYWRkKCdoaWRlJyk7XG4gICAgcmV0dXJuIGluZGV4O1xufVxuIl19
